def BUILD_DIR = new File(project.buildDir, 'cmake')
def CMAKE_FILE = project.file('native/CMakeLists.txt')

def getToolchainFile(def platformFileName) {
    if (platformFileName == null) {
        return null
    }

    return "-DCMAKE_TOOLCHAIN_FILE=${rootProject.file(platformFileName)}"
}

def getAdditionalProperties() {
    if (project.ext.has('CMAKE_PROPERTIES')) {
        return (String) project.ext.get('CMAKE_PROPERTIES')
    }
    return null
}

task buildNatives {
}

task cleanNatives {
}

project.ext.FLAVORS.each { flavor ->
    def flavorBuildDir = new File(BUILD_DIR, flavor.key);

    def deleteDirTask = project.tasks.register("deleteBuildDirectory$flavor.key", Delete) {
        delete flavorBuildDir.absolutePath
    }

    def buildDirTask = project.tasks.register("createBuildDirectory$flavor.key", Exec) {
        dependsOn deleteDirTask.get()
        commandLine 'mkdir', '-p', flavorBuildDir.absolutePath
    }

    def runCmakeTask = project.tasks.register("runCmake$flavor.key", Exec) {
        dependsOn buildDirTask.get()

        workingDir flavorBuildDir.absolutePath

        def cmd = ['cmake']

        def toolchainFile = getToolchainFile(flavor.value['toolchain'])
        if (toolchainFile != null) {
            cmd.add toolchainFile
        }

        def additionalProperties = getAdditionalProperties()
        if (additionalProperties != null) {
            cmd.add additionalProperties
        }

        cmd.add CMAKE_FILE.parentFile.absolutePath

        commandLine cmd
    }

    def runMakeTask = project.tasks.register("runMake$flavor.key", Exec) {
        dependsOn runCmakeTask.get()

        workingDir flavorBuildDir.absolutePath
        commandLine 'make'
    }

    tasks.buildNatives.dependsOn runMakeTask.get()
    tasks.cleanNatives.dependsOn deleteDirTask.get()

    project(':').jar.from(new File(flavorBuildDir, flavor.value['output'])) {
        into "libs/${flavor.key}/${flavor.value['output']}"
    }
}
