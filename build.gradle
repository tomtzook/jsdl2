buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.github.tomtzook:castle:2.0.0-beta.3'
        classpath files('/home/tomtzook/projects/tryouts/gradle-cmake/plugin/build/libs/plugin-1.0.0.jar')
    }
}

plugins {
    id 'java-library'
}

apply plugin: 'gradle-cmake'
apply from: rootProject.file('extras.gradle')

group GROUP
version VERSION

sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.4.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.4.2'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.2.0'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.23.4'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '2.23.0'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.1'
}

test {
    useJUnitPlatform()

    testLogging {
        events "failed"
        exceptionFormat "full"
        showStackTraces true
    }
}

jar {
    archiveBaseName.set(project.name)

    from (cmake.outputDir.map {
        return it.asFileTree.matching {
            include '**/*.dll'
            include '**/*.so'
            exclude '**/CMakeFiles/**'

        }
    }) {
        into 'natives'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveBaseName.set(project.name)
    archiveClassifier.set('sources')

    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveBaseName.set(project.name)
    archiveClassifier.set('javadoc')

    from javadoc.destinationDir
}

task jsdl2All(type: Jar, dependsOn: tasks.assemble) {
    dependsOn sourcesJar
    dependsOn javadocJar

    archiveFileName.set('jsdl2-all.jar')
    destinationDirectory.set(project.buildDir)

    from sourceSets.main.output
    from sourceSets.main.allSource
    from javadoc.destinationDir
    from (cmake.outputDir.map {
        return it.asFileTree.matching {
            include '**/*.dll'
            include '**/*.so'
            exclude '**/CMakeFiles/**'

        }
    }) {
        into 'natives'
    }
}

machines.customMachines.register("mingw-gcc-x86_x64") {
    it.toolchainFile.set(file('platforms/x86_64-mingw-gcc.cmake'))
}

cmake {
    targets {
        sdl_jni {
            cmakeLists.set(file('native/CMakeLists.txt'))
            targetMachines.addAll(machines.host, machines.customMachines.'mingw-gcc-x86_x64')
        }
    }
}

tasks.clean.dependsOn tasks.cmakeClean
tasks.jar.dependsOn tasks.cmakeBuild
