buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath 'com.github.tomtzook:castle:2.0.0-beta.3'
        classpath files('/home/tomtzook/projects/tryouts/gradle-cmake/plugin/build/libs/plugin-1.0.0.jar')
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

apply plugin: 'io.github.tomtzook.gradle-cmake'
apply from: rootProject.file('extras.gradle')

group GROUP
version VERSION

sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.4.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.4.2'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.2.0'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.23.4'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '2.23.0'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.1'
}

test {
    useJUnitPlatform()

    testLogging {
        events "failed"
        exceptionFormat "full"
        showStackTraces true
    }
}

jar {
    archiveBaseName.set(project.name)

    from (cmake.outputDir.map {
        return it.asFileTree.matching {
            include '**/*.dll'
            include '**/*.so'
            exclude '**/CMakeFiles/**'

        }
    }) {
        into 'natives'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveBaseName.set(project.name)
    archiveClassifier.set('sources')

    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveBaseName.set(project.name)
    archiveClassifier.set('javadoc')

    from javadoc.destinationDir
}

task jsdl2All(type: Jar, dependsOn: tasks.assemble) {
    dependsOn sourcesJar
    dependsOn javadocJar

    archiveFileName.set('jsdl2-all.jar')
    destinationDirectory.set(project.buildDir)

    from sourceSets.main.output
    from sourceSets.main.allSource
    from javadoc.destinationDir
    from (cmake.outputDir.map {
        return it.asFileTree.matching {
            include '**/*.dll'
            include '**/*.so'
            exclude '**/CMakeFiles/**'

        }
    }) {
        into 'natives'
    }
}

machines.customMachines.register("windows-x86_x64") {
    it.toolchainFile.set(file('platforms/x86_64-mingw-gcc.cmake'))
}
machines.customMachines.register("linux-gnueabihf-arm") {
    it.toolchainFile.set(file('platforms/arm-linux-gnueabihf-gcc.cmake'))
}
machines.customMachines.register("linux-aarch64") {
    it.toolchainFile.set(file('platforms/aarch64-linux-gnu-gcc.cmake'))
}

def compileMachineTargets = [machines.host]
compileMachineTargets.addAll(machines.customMachines)

cmake {
    targets {
        sdl_jni {
            cmakeLists.set(file('native/CMakeLists.txt'))
            targetMachines.addAll(compileMachineTargets)
        }
    }
}

tasks.clean.dependsOn tasks.cmakeClean
tasks.jar.dependsOn tasks.cmakeBuild

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'jsdl2'
                description = 'Java Bindings for SDL2'
                url = 'https://github.com/tomtzook/jsdl2'

                licenses {
                    license {
                        name = 'Apache License 2.0'
                        url = ' http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }

                developers {
                    developer {
                        id = 'tomtzook'
                        name = 'Tom Tzook'
                        email = 'tomtzook@gmail.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/tomtzook/jsdl2.git'
                    developerConnection = 'scm:git:ssh://github.com/tomtzook/jsdl2.git'
                    url = 'https://github.com/tomtzook/jsdl2'
                }
            }
        }
    }

    repositories {
        maven {
            if (isReleaseBuild()) {
                name = 'NexusStaging'
                url = NEXUS_RELEASE_REPOSITORY_URL
            } else {
                name = 'NexusSnapshot'
                url = NEXUS_SNAPSHOT_REPOSITORY_URL
            }

            credentials {
                username getNexusUsername()
                password getNexusPassword()
            }
        }
    }
}

compileMachineTargets.each { machine ->
    def artifactTask = tasks.register("zipNative${machine.name}", Jar) {
        dependsOn(tasks.cmakeBuild)

        def outputDir = cmake.outputDir.dir("sdl_jni/${machine.name}")
        from outputDir.map {
            return it.asFileTree.matching {
                include '**/*.dll'
                include '**/*.so'
                exclude '**/CMakeFiles/**'
            }
        }

        archiveBaseName.set("${project.name}-jni-${machine.name}")
    }

    publishing {
        publications {
            "maven${machine.name}"(MavenPublication) {
                artifactId = "jsdl2-jni-${machine.name}"

                artifact artifactTask

                pom {
                    name = "jsdl2-jni-${machine.name}"
                    description = 'Java Bindings for SDL2 (JNI)'
                    url = 'https://github.com/tomtzook/jsdl2'

                    licenses {
                        license {
                            name = 'Apache License 2.0'
                            url = ' http://www.apache.org/licenses/LICENSE-2.0'
                        }
                    }

                    developers {
                        developer {
                            id = 'tomtzook'
                            name = 'Tom Tzook'
                            email = 'tomtzook@gmail.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:git://github.com/tomtzook/jsdl2.git'
                        developerConnection = 'scm:git:ssh://github.com/tomtzook/jsdl2.git'
                        url = 'https://github.com/tomtzook/jsdl2'
                    }
                }
            }
        }
    }
}

if (shouldSign()) {
    signing {
        sign publishing.publications.mavenJava
    }
}
